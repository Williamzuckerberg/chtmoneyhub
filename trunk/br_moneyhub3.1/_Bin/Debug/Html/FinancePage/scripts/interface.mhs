/*
 * sql中的变量统一使用单引号"'"
 */

/** 取得所有账户
 */
function getAccountList() {
	try {
		result = JSON.parse(window.external.QuerySQL("SELECT a.id AS aid, a.name AS aname, b.name AS bname, b.id AS bid, tbBank_id, a.tbAccountType_id AS tid, b.tbAccountType_id AS tid2, "
			+ "tbCurrency_id, Balance, Days, EndDate, a.Comment AS acomment, b.Comment AS bcomment, keyInfo, BankID FROM tbAccount a, tbSubAccount b LEFT JOIN tbbank c ON c.id=tbBank_id WHERE a.id=b.tbAccount_id ORDER BY a.id DESC, tid2, bid"));
	} catch (e) {
	}
	return result;
}

function getBytes(chrList) {
    var bytes = [];
    for (var i=0; i<chrList.length; i++) {
        c = "";
        ch = chrList.charAt(i);
        execScript("c = Hex(Asc(ch))", "vbscript");
        bytes.push(c);
    }
    return bytes;
}

/** 取得某一类型的所有金融机构
 * @param classId 金融机构类型编号
 */
function getBankInfo(classId) {
	try {
		 result = JSON.parse(window.external.QuerySQL("SELECT id, name, bankId, classId, Website FROM tbBank WHERE classId=" + classId + " ORDER BY CASE WHEN id<10000 THEN id ELSE name END"));
    } catch (e) {
    }
    return result;
}

/** 取得某金融机构的所有信息
 * @param id 金融机构编号
 */
function getSingleBankInfo(id){
	try {
        result = JSON.parse(window.external.QuerySQL("SELECT id, name, bankId, classId FROM tbbank WHERE id=" + id));
    } 
    catch (e) {
    }
    return result;
}

/** 添加用户金融机构
 * @param name 金融机构名称
 * @param classes 金融机构类型
 */  
function insertBank(name, classes,website) {
	//用户初始基准
	var result = false;
	var initPre = 10000;
	var bankId = -1;
	try {
        result = JSON.parse(window.external.QuerySQL("SELECT MAX(id) AS id FROM tbBank"));
    } catch (e) {
        var result = [{
            "id": 100
        }];
    }
	$.each(result, function(i, n){
		if (n.id >= initPre) {
			bankId = n.id + 1;
		} else{
			bankId = initPre;
		}
	});
	try {
		name = replaceSQLStr(name);
		if (window.external.ExecuteSQL("INSERT INTO tbBank(id, name, classId,Website) VALUES(" + bankId + ", '" + name + "', "+ classes + ",'" + website + "')") > 0) {
			result = true;
		}
    } catch (e) {
    }
	return bankId;
}

/** 更改金融机构名称
 * @param id 金融机构编号
 * @param name 金融机构名称
 */  
function updateBank(id, name, website) {
	name = replaceSQLStr(name);
	var result = false;
	try {
		if (window.external.ExecuteSQL("UPDATE tbBank SET name='" + name + "', website='" + website + "' WHERE id=" + id) > 0) {
			result = true;
		}
    } catch (e) {
    }
	return result;
}

/** 删除金融机构
 * @param id 金融机构编号
 */ 
function deleteBank(id){
	var sql1="delete from tbBank where id = "+id;
	var sql2="update tbAccount set tbBank_id ='' where tbBank_id="+id;
	try {
		window.external.ExecuteSQL(sql2);
		window.external.ExecuteSQL(sql1)
    } 
    	catch (e) {
    }
}

/** 取得分类相关信息
 */
function getCategoryInfo() {
	try {
        result = JSON.parse(window.external.QuerySQL("SELECT a.id AS id1, b.id AS id2, a.name AS name1, b.name AS name2, type FROM tbCategory1 a, tbCategory2 b WHERE a.id=b.tbCategory1_id AND (a.id<10000 OR a.id>10025) ORDER BY a.id ASC, CASE WHEN name2='CATA420' THEN 0 ELSE 1 END, b.id"));
    } catch (e) {
    }
    return result;
}

/** 获取所有二级分类
 */ 
function getCategory1Default(type) {
	try {
        var sql= "select a.id as id1, b.id as id2, a.name as name1, b.name as name2, type from tbCategory1 a, tbCategory2 b where a.id=b.tbCategory1_id and a.id not in (10018,10019,10020,10021,10023,10024) and name2='CATA420'";
        if (!(type === undefined))
			sql += " and type= " + type + " ";
        sql +=" order by a.id asc ";  
        result = JSON.parse(window.external.QuerySQL(sql));
    } catch (e) {
    }
    return result;
}

/** 获取所有一级分类
 */ 
function getCategory1Info() {
	try {
        result = JSON.parse(window.external.QuerySQL("SELECT id, name, type FROM tbCategory1 WHERE id<10000 OR id>10025"));
    } catch (e) {
    }
    return result;
}

/** 添加一级分类
 * @param name1 一级分类名称
 * @param type 收入还是支出
 */  
function addCategory1(name1, type) {
	var id1 = 0;
	name1 = replaceSQLStr(name1);
	try {
		id1 = window.external.ExecuteSQL("INSERT INTO tbCategory1(name, type) VALUES('" + name1 + "', " + type + ")");
	} catch(e) {
		id1 = 3;
	}
	return id1;
}

/** 添加二级分类
 * @param id 一级分类编号
 * @param name1 二级分类名称
 */  
function addCategory2(id, name) {
	name = replaceSQLStr(name);
	var id1 = 0;
	try {
		id1 = window.external.ExecuteSQL("INSERT INTO tbCategory2(name, tbCategory1_id) VALUES('" + name + "', " + id + ")");
	} catch(e) {
	}
	return id1;
}

/** 更改分类信息
 * @param classId 1表示修改一级分类，2表示修改二级分类
 * @param name 分类名称
 * @param id 分类编号
 * @param parentId 父分类编号 
 */   
function updateCategory(classId, name, id, parentId) {
	var result = false;
	var table = "tbCategory2";
	name = replaceSQLStr(name);
	var strParent = "";
	if (classId == 1) {
		table = "tbCategory1";
	} else {
		strParent = ", tbCategory1_id=" + parentId;
	}
	try {
		if (window.external.ExecuteSQL("UPDATE " + table + " SET name='" + name + "'" + strParent + " WHERE id=" + id) > 0)
			result = true;
    } catch (e) {
    }
	return result;
}

/** 删除分类
 * @param classId 1表示删除一级分类，2表示删除二级分类
 * @param id 分类编号
 */  
function deleteCategory(classId, id) {
	var result = false;
	var table = "tbCategory2";
	if (classId == 1)
		table = "tbCategory1";
	try {
		if (window.external.ExecuteSQL("DELETE FROM " + table + " WHERE id=" + id) > 0)
			result = true;
    } catch (e) {
    }
	return result;
}

/** 取得所有币种
 */
function getCurrencyInfo(){
	try {
		result = JSON.parse(window.external.QuerySQL("SELECT id, name FROM tbCurrency ORDER BY id ASC"));
    } catch (e) {
    	result =[];
    }
    return result;
}

/** 取得币种内容
 * @param id 币种编号
 */
function getCurrencyDesc(id) {
	var result = "";
	$.each(listCurrency, function(i, n) {
		if(id == n.id) {
			result = n.Name;
			return false;
		}
	});
	return result;
}

/** 取得支付对象相关信息
 * @param id 支付对象编号
 * @return 支付对象列表 
 */ 
function getPayeeInfo(id){
	try {
        var queryString = "";
        if(id === undefined )
			queryString= "SELECT id, name, email, tel FROM tbPayee ORDER BY name ASC";
        else
			queryString = "SELECT id, name, email, tel FROM tbPayee WHERE id=" + id;
		 result = JSON.parse(window.external.QuerySQL(queryString));
    } catch (e) {
    }
    return result;
}

/** 获取支付对象名称
 * @param id 支付对象编号
 * @return 支付对象名称 
 */
function getSinglePayeeName(id) {
	try {
        var temp = "";
		result = JSON.parse(window.external.QuerySQL("SELECT name as pName FROM tbPayee where id="+id));
        $.each(result, function(i,n) {
           	temp = n.pName;
           	return false;
        });
    } catch (e) {
    }
    return temp;
}

/** 添加支付对象
 * @param name 姓名
 * @param email 邮件
 * @param tel 电话
 */   
function addNewPayee(name, email, tel) {
	//用户初始基准
	name = replaceSQLStr(name);
	email = replaceSQLStr(email);
	tel = replaceSQLStr(tel);
	var test = -1;
	try {
		var test = window.external.ExecuteSQL("INSERT INTO tbPayee(name, email, tel) VALUES('" + name + "', '" + email + "', '" + tel + "')");
    } catch (e) {
    }
	return test;
}

/** 编辑支付对象
 * @param id 编号
 * @param name 姓名
 * @param email 邮件
 * @param tel 电话
 */   
function updatePayee(id, name, email, tel) {
	name = replaceSQLStr(name);
	email = replaceSQLStr(email);
	tel = replaceSQLStr(tel);
	var result = false;
	try {
		if(window.external.ExecuteSQL("UPDATE tbPayee SET name='" + name + "', email='" + email + "', tel='" + tel + "' WHERE id=" + id) > 0)
			result = true;
    } catch (e) {
    }
	return result;
}

/** 删除支付对象
 * @param id 支付对象编号
 */ 
function deletePayee(id) {
	var result = false;
	try {
		if (window.external.ExecuteSQL("DELETE FROM tbPayee WHERE id=" + id) > 0)
			result = true;
    } catch (e) {      
    }
	return result;
}

/** 取得账户种类相关信息
 */
function getAccountTypeInfo(){
	try {
		result = JSON.parse(window.external.QuerySQL("SELECT id,name FROM tbAccountType where id < 100 ORDER BY id ASC"));
    } catch (e) {
    }
    return result;
}

/** 取得账户子账户相关信息
 * @param id 子账户编号
 */
function getAccountSubInfo(id){
	try {
        if(id!=0){
			result = JSON.parse(window.external.QuerySQL("SELECT b.id as bid, balance, c.name as cname FROM tbAccount a, tbSubAccount b, tbCurrency c where b.tbAccount_id = a.id and c.id = b.tbCurrency_id and a.id = "+id+"  ORDER BY b.id ASC"));
		} 
    } catch (e) {
    }
    return result;
}

/**
 *编辑转账记录时，得到账户名
 */
function getSubAccountName(id){
    var result = "";
    try{
	   if (id != 0){
       	   result = JSON.parse(window.external.QuerySQL("select a.name as aname, b.name as bname from tbAccount a, tbSubAccount b where a.id = b.tbAccount_id and b.id = " + id)); 
	   }
	}catch(e){
	}
    return result[0].aname + "->" + result[0].bname;
}


/** 添加主账户
 * @param name 账户名称
 * @param accountTypeId 账户类型
 * @param bankId 银行
 * @param content 备注   
 */
function addAccount(name, accountTypeId, bankId, content, keyInfo) {
	name = replaceSQLStr(name);
	content = replaceSQLStr(content);
	if (bankId == null) bankId = "";
	try {
		if(keyInfo === undefined ){
			result = window.external.ExecuteSQL("INSERT INTO tbAccount(name, tbAccountType_id, tbBank_id, comment) VALUES('" + name + "', '" + accountTypeId + "', '" + bankId + "', '" + content + "')");
		} 
		else {
			result = window.external.ExecuteSQL("INSERT INTO tbAccount(name, tbAccountType_id, tbBank_id, comment, keyInfo) VALUES('" + name + "', '" + accountTypeId + "', '" + bankId + "', '" + content + "', '"+keyInfo+"')");
		}
    } catch(e) {
    	result = -1;
    }
	return result;
}

/** 添加子账户
 * @param accountId 主账户
 * @param tbCurrency_id 币种
 * @param openbalance 开户余额
 * @param balance 余额
 * @param days 存期
 * @param enddate 到期日
 * @param tbAccountType_id 子账户类型
 * @param subName 子账户名称
 * @return 子账户编号        
 */
function addAccountSub(accountId, tbCurrency_id, openbalance, balance, days, enddate, tbAccountType_id, subName, comment) {
	subName = replaceSQLStr(subName);
	var result = -1;
	if ((tbAccountType_id == "") || (tbAccountType_id == null))
		tbAccountType_id = 8756;
	
	try {
		result = window.external.ExecuteSQL("INSERT INTO tbSubAccount(tbAccount_id, tbCurrency_id, openbalance, balance, days, enddate, name, tbAccountType_id, comment) VALUES('" + accountId + "', '" + tbCurrency_id + "', '" + openbalance + "', '" + balance + "', '" + days + "', '" + enddate + "', '" + subName + "', '" + tbAccountType_id + "', '" + comment + "')");
    } catch(e) {
    }

	//获取今天的日期
	var a = new Date();
	if ((( a.getMonth() + 1 ) + "").length == 1 )
		month = "0" + ( a.getMonth() + 1 );
	else
		month = a.getMonth() + 1;
	if ((a.getDate() + "").length == 1)
		date = "0" + a.getDate();
	else
		date =  a.getDate();
	transdate = a.getFullYear() + "-" + month + "-" + date;
	if (balance != 0) {
		//添加一笔调整余额交易
		addTransaction(transdate, 0, 10067, balance, 0, result, 0, "", 0, 0);
	}
	return result;
}

/** 编辑账户
 * @param id
 * @param accountTypeId
 * @param name
 * @param bankId
 * @param content
 */     
function editAccount(id, accountTypeId, name, bankId, content) {
	var result = 0;
	name = replaceSQLStr(name);
	content = replaceSQLStr(content);
	var sql1 = "";
	if ((accountTypeId == 1) || (accountTypeId == 6) || (accountTypeId == 7) || (accountTypeId == 8) || (accountTypeId == 9)) {
		//以上分类不涉及金融机构
		if ((bankId == "") || (bankId == null)) {
			bankId = "";
		}
		sql1 = "UPDATE tbAccount SET name='" + name + "', comment='" + content + "' WHERE id=" + id;
	} else {
		sql1 = "UPDATE tbAccount SET name='" + name + "', comment='" + content + "', tbBank_id='" + bankId + "' WHERE id=" + id;
	}
	try {
		result = window.external.ExecuteSQL(sql1);
    } catch (e) {
    }
	return result;
}

/** 编辑子账户
 * @param id 子账户编号
 * @param days 存期
 * @param enddate 到期日
 * @param tbAccountType_id 子账户类型
 * @param subName 子账户名
 * @param myTid 主账户类型
 */        
function editAccountSub(id, days, enddate, tbAccountType_id, subName, comment, myTid) {
	var result = -1;
	subName = replaceSQLStr(subName);
	try {
		var sql = "UPDATE tbSubAccount SET days='" + days + "', enddate='" + enddate + "', comment='" + comment + "'";
		if (myTid == 3) {
			sql += " , name='" + subName + "' ";
		} 
		sql += ", tbAccountType_id='" + tbAccountType_id + "' WHERE id=" + id;
		result = window.external.ExecuteSQL(sql);
    } catch (e) {
    }
	return result;
}

/** 添加交易
 * @param transdate 交易日期
 * @param payee_id 收付款方
 * @param tbCategory2_id 分类
 * @param amount 金额
 * @param direction 方向（用于转账）
 * @param tbSubaccount_id 子账户
 * @param exchangerate 汇率
 * @param comment 备注
 * @param tbSubaccount_id1 转入子账户
 * @param transactionClasses 手工账或余额调整        
 */
function addTransaction(transdate, payee_id, tbCategory2_id, amount, direction, tbSubaccount_id, exchangerate, comment, tbSubaccount_id1, transactionClasses, sign) {
	var result = -1;
	comment = replaceSQLStr(comment);
	//用户未选择分类，则定义为未分类处理
	if (tbCategory2_id == 10000) {
		//支出
		tbCategory2_id = 10065;
	} else if (tbCategory2_id == 10001) {
		//收入
		tbCategory2_id = 10066;
	}
	try {
		//根据3.1需求，添加参数transactionClasses,sign进来
		var sql = "INSERT INTO tbTransaction(transdate, tbPayee_id, tbCategory2_id, amount, direction, tbSubaccount_id, exchangerate, comment, tbSubaccount_id1";
		if( !(transactionClasses === undefined ) ) sql+= ", transactionClasses ";
		if( !(sign === undefined ) ) sql+= ", sign ";
		sql += " ) VALUES( '"+transdate + "', " + payee_id + ", " + tbCategory2_id + ", " + amount + ", '" + direction + "', " + tbSubaccount_id + ", '" + exchangerate + "', '" + comment + "', '" + tbSubaccount_id1 + "'";
		if( !(transactionClasses === undefined ) ) sql+=" ,"+transactionClasses;
		if( !(sign === undefined ) ) sql+=" ,'"+sign+"'";
		sql += " )";
		result = window.external.ExecuteSQL(sql);
    } catch (e) {
    }
	return result;
}

/** 编辑交易
 * @param transdate 交易日期
 * @param payee_id 收付款方
 * @param tbCategory2_id 分类
 * @param amount 金额
 * @param direction 方向（用于转账）
 * @param tbSubaccount_id 子账户
 * @param exchangerate 汇率
 * @param comment 备注
 * @param tbSubaccount_id1 转入子账户        
 */ 
function editTrans(transdate, payee_id, tbCategory2_id, amount, direction, exchangerate, comment, id) {
	var result = false;
	comment = replaceSQLStr(comment);
	if(tbCategory2_id == 10000){
		//支出
		tbCategory2_id = 10065;
	} else if(tbCategory2_id == 10001){
		tbCategory2_id = 10066;
	}
	try {
		result1 = JSON.parse(window.external.QuerySQL("SELECT transdate, amount, transactionclasses FROM tbtransaction WHERE id=" + id));
		transactionclasses = result1[0].transactionClasses;
		if (result1[0].transactionClasses == 1) {
			//如果原来是系统账，改动金额和日期后变为手工账
			if ((result1[0].TransDate != transdate) || (parseFloat(result1[0].Amount) != parseFloat(amount))) transactionclasses = 0;
		}
		if (window.external.ExecuteSQL("UPDATE tbTransaction SET transactionclasses=" + transactionclasses + ", transdate='" + transdate + "', tbPayee_id=" + payee_id + ", tbCategory2_id=" + tbCategory2_id + ", amount=" + amount + ", direction='"+direction + "', exchangerate='" + exchangerate + "', comment='" + comment + "' WHERE id=" + id) > 0)
			result = true;
    } catch (e) {
    }
	return result;
}

//删除交易
function delTransaction(id){
	var result=false;
	try {
		if(window.external.ExecuteSQL("delete from tbtranaction where id="+id)>0)
			result=true;
    } catch (e) {
    }
	return result;
}

/** 获取全部交易
 * @param aid 主账户
 * @param sid 子账户
 * @param type 未定义则为添加时间条件，有值则为按时间条件筛选
 */
function getTransaction(aid, sid, type) {
	var result = "";
	var sql1 = "SELECT e.id AS eid, a.id AS aid, d.tbaccounttype_id as tid, TransDate, tbPayee_id, tbCategory2_id, type, c.name AS cname, Amount, direction, tbSubAccount_id, tbSubAccount_id1, a.tbPayee_id AS pid, "
		+ "direction AS deric, a.comment AS acomment, Type, e.name AS dname, d.name AS aname, b.name AS bname, f.name AS fname, c.name AS cname, g.name as payeeName, transactionClasses "
		+ "FROM tbTransaction a, tbCategory2 b, tbCategory1 c, tbAccount d, tbSubAccount e, tbCurrency f LEFT JOIN tbPayee g ON a.tbpayee_id=g.id ";
	sql1 += "WHERE b.tbCategory1_id=c.id AND a.tbCategory2_id=b.id AND a.tbSubAccount_id=e.id AND e.tbAccount_id=d.id AND f.id=e.tbCurrency_id ";
	if (type === undefined) {
		//type未定义则执行时间的检索条件
		var year = (today[0] == "") ? new Date().getFullYear : today[0];
		var month = (today[1] == "") ? new Date().getMonth() + 1 : today[1];
		
		if (today[1] == "") { 
		    //$("#" + month).addClass("now");
			//today.splice(1, 1, new Date().getMonth() + 1);
		} else {
			var startDate = year + "-" + month + "-01";
			var endDate = year + "-" + month + "-31";
			sql1 += "AND transdate >= '" + startDate + "' AND transdate <= '" + endDate + "' ";	
		} 	
	}
	//modified by liuchang;
	//将账户选择移出上面的业务逻辑，修改bug1998
	if (!(aid === undefined) && (aid != "")) {
		sql1 += " AND d.id=" + aid;
	}
	if (!(sid === undefined) && (sid != "")) {
		sql1 += " AND e.id=" + sid;
	}
	switch (conditionSelected[0]) {
		case "con1":
			//按照时间排序
			if( conditionSelected[1] == 0 ) sql1 += " ORDER BY transDate ASC";
			else sql1 += " ORDER BY transDate DESC";
			break;
		case "con2":
			//按照大分类排序
			if( conditionSelected[1] == 0 ) sql1 += " ORDER BY cname ASC";
			else sql1 += " ORDER BY cname DESC";
			break;
		case "con3":
			//按照收入排序
			if (conditionSelected[1] == 0) sql1 += " ORDER BY c.type asc, a.amount ASC";
			else sql1 += " ORDER BY c.type asc, a.amount DESC";
			break;
		case "con4":
			//按照支出排序
			if (conditionSelected[1] == 0) sql1 += " ORDER BY c.type desc, a.amount ASC";
			else sql1 += " ORDER BY c.type desc, a.amount DESC";
			break;
		case "con6":
			//按照支付对象排序
			if (conditionSelected[1] == 0) sql1 += " ORDER BY payeeName ASC";
			else sql1 += " ORDER BY payeeName DESC";
			break;
		case "con7":
			//按照备注排序
			if (conditionSelected[1] == 0) sql1 += " ORDER BY acomment ASC";
			else sql1 += " ORDER BY acomment DESC";
			break;
		default:
			//默认为时间升序
			sql1 += " ORDER BY transDate ASC";
			break;
	}
	try {
		result = JSON.parse(window.external.QuerySQL(sql1));
	} catch (e) {
	}
	return result;
}

//获取单个交易记录
function getSingleTransaction(id) {
	var result = "";
	try {
		result = JSON.parse(window.external.QuerySQL("select transDate, a.id as aid, c.id as cid, tbPayee_id,tbCategory2_id,amount,direction,tbSubAccount_id,tbSubAccount_id1,a.comment as acomment from tbTransaction a, tbSubAccount b, tbAccount c  where a.tbSubAccount_id=b.id and c.id = b.tbAccount_id and a.id="+id));
	} catch(e) {
	}
	return result;
}

//获取子分类的accountType;
function getSubAccountType(){
	var result = new Array();
	result['100'] = "活期存款";
	result['101'] = "定期存款";
	result['102'] = "理财产品";
    return result;
}

//获取用户存款期限
function getAccountSubDuringData(){
	var result = [{
            "id": 90,
            "Name":"3个月"
        }, {
			"id": 180,
            "Name":"6个月"
        }, {
			"id": 365,
            "Name":"1年"
        }, {
			"id": 730,
            "Name":"2年"
        }, {
            "id": 1095,
            "Name":"3年"
        }, {
            "id": 1825,
            "Name":"5年"
        },{
            "id": 0,
            "Name":"(空)"
        }];
	return result;
}

/** 获取饼图数据
 * @param startDate 开始日期
 * @param endDate 结束日期
 * @param during 按周还是按月
 * @param curStyle   
 */
function getXML(startDate, endDate, during, curStyle){
	var xmlStr = "";
	try {
		xmlStr = window.external.GetXMLData(startDate, endDate, during, curStyle);
	} catch (e) {
		xmlStr="";
		xmlStr += '<chart>';
			xmlStr += '<set seriesName="保险费" value="25" />';
		  	xmlStr += '<set seriesName="待报销" value="75" />';
		xmlStr += '</chart>';
		xmlStr += '<chart>';
		    xmlStr += '<set seriesName="其它收入" value="100" />';
		xmlStr += '</chart>';
		xmlStr += '<chart>';
		if (during != "month") {
		    xmlStr += '<set seriesName="支出" value="67" />';
		    xmlStr += '<set seriesName="收入" value="33" />';
		} else {
		    xmlStr += '<set seriesName="支出" value="20" />';
		    xmlStr += '<set seriesName="收入" value="80" />';
		}
		xmlStr += '</chart>';
		xmlStr += '<chart>';
		    xmlStr += '<set seriesName="保险费" value="1000.00" />';
		    xmlStr += '<set seriesName="待报销" value="3000.00" />';
		xmlStr += '</chart>';
		xmlStr += '<chart>';
		    xmlStr += '<set seriesName="其它收入" value="2000.00" />';
		xmlStr += '</chart>';
		xmlStr += '<chart>';
		    xmlStr += '<set seriesName="支出" value="4000.00" />';
		    xmlStr += '<set seriesName="收入" value="2000.00" />';
		xmlStr += '</chart>';
	}
	return xmlStr;
}

/** bar图数据生成
 * @param startDate
 * @param endDate
 * @param during
 */   
function getBarXml(startDate, endDate, during){
	var xmlStr = "";
	try {
		xmlStr = window.external.GetXMLData(startDate, endDate, during, "bar");
	} catch(e) {
	}
	return xmlStr;
}


/** 生成随机颜色
 */
function randomColor() {
	//16进制方式表示颜色0-F
	var arrHex = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
	var strHex = "#";
	var index;
	for(var i = 0; i < 6; i++) {
		//取得0-15之间的随机整数
		index = Math.round(Math.random() * 15);
		strHex += arrHex[index];
	}
	return strHex;
}

/** 处理饼图数据
 * @param xml 原始数据
 */ 
function handlePieXmlData(xml){
	var result;
	try {
		result = xml.split("</chart>");	
	} catch(e){
	}
	return result;
}

var renderData = "";

/** 生成下方收支比例图的XML
 * @param str 原始XML
 * @param style 图表类型
 * @param classId 0表示支出，1表示收入
 * @param myValue 金额
 */    
function createXmlData(str, style, classId, myValue) {
	var result = "";
	if(style == "pie"){
		var result1 ="";
		if (classId == 0) {
			//支出
			result1 = '<graph lineThickness="1" animation="1" showNames="0" alpha="100" showLimits="1"  formatNumberScale="0" numberSuffix="%" numDivLines="3" limitsDecimalPrecision="0" showValues="0" showPercentageValues="0" hoverCapSepChar="，" baseFont="宋体" baseFontSize="12" showCanvasBase="1" showLegend="1">';
		} else {
			//收入
			result1 = '<graph lineThickness="1" animation="1" showNames="0" alpha="100" showLimits="1"  formatNumberScale="0" numberSuffix="%" numDivLines="3" limitsDecimalPrecision="0" showValues="0" showPercentageValues="0" hoverCapSepChar="，" baseFont="宋体" baseFontSize="12" showCanvasBase="1" showLegend="1">';
		}
		result = str.replace(/<chart>/g, result1) + "</graph>";
		result = getColor(result,style);
		result = renderData;
	} else if (style == "newPie") {
		if (classId == 0) {
			//支出
			result1='<graph lineThickness="1" animation="1" showNames="0" alpha="100" showLimits="1"  formatNumberScale="0" numberSuffix="%" numDivLines="3" limitsDecimalPrecision="0" showValues="0" showPercentageValues="1" hoverCapSepChar="，" baseFont="宋体" baseFontSize="12" showCanvasBase="1" showLegend="1">';
		} else {
			//收入
			result1='<graph lineThickness="1" animation="1" showNames="0" alpha="100" showLimits="1"  formatNumberScale="0" numberSuffix="%" numDivLines="3" limitsDecimalPrecision="0" showValues="0" showPercentageValues="1" hoverCapSepChar="，" baseFont="宋体" baseFontSize="12" showCanvasBase="1" showLegend="1">';
		}
		result=str.replace(/<chart>/g,result1)+"</graph>";
		result=getColor(result,style);
		result=renderData;
	} else if(style == "bar") {
		var result1='<graph caption="" lineThickness="1" animation="1" showNames="1" alpha="100" showLimits="1"  formatNumberScale="0"  numberPrefix="￥"  numberSuffix="元"  numDivLines="3"  limitsDecimalPrecision="0" showValues="0" baseFont="宋体" baseFontSize="12"  showCanvasBase="0" showLegend="0">';
		result=str.replace(/<chart>/g,result1);
		result=result.replace("</chart>","</graph>");
		getColor(result,style);
		result=renderData;
	}	
	return result;
}

var colorIndex = 0;

//颜色数组
var colorDesc = ["#f75556",  "#bf9bd1",  "#f8cf4d",  "#78cc8f",  "#73cfe1",  "#ff72aa",  "#e99b31",  "#a4b3f1",  "#65bbbf",  "#ffc4f9",  "#7eb7df",  "#a68064",  "#a23737",  "#6b6bb4",  "#6b8323",  "#db7093",  "#527f76",  "#448bc3",  "#9eb2ba",  "#dfb597"];

/** 获取颜色
 * @param str 数据
 * @param style 图表类型 
 */
function getColor(str, style) {
	var result1 = "";
	
	if (style == "pie") {
		if (str.indexOf('<set seriesName=') != -1) {
			result1 = str.replace('<set seriesName=', '<set color="' + colorDesc[colorIndex] + '" name=');
			if (colorIndex<19) colorIndex++;
			else colorIndex=0;
			this.getColor(result1, style);
		} else {
			if (result1 == "") {
				renderData = str;		
			}
		}	
	} else if(style == "newPie") {
		if(str.indexOf('<set seriesName=')!=-1){
			result1=str.replace('<set seriesName=', '<set color="' + colorDesc[colorIndex] + '" name=');
			if(colorIndex<19) colorIndex++;
			else colorIndex = 0;
			this.getColor(result1,style);
		}else{
			if (result1 == "") {
				renderData = str;		
			}
		}	
	} else {
		if (str.indexOf('<dataset seriesName=') != -1) {
			result1 = str.replace('<dataset seriesName=', '<dataset color="' + colorDesc[colorIndex] + '" seriesName=');
			if (colorIndex<19) colorIndex++;
			else colorIndex = 0;
			this.getColor(result1,style);
		} else {
			if (result1 == "") {
				renderData = str;		
			}
		}	
	}
	colorIndex = 0;
	return result1;
}

/** 从xml字符串得到xml对象
 * @param {} data 传入的xml字符串
 * @return {} xml 得到的xml对象
 */
function getXMLInstance(data)   
{
    var xml;
    if($.browser.msie){
        xml = new ActiveXObject("Microsoft.XMLDOM");
        xml.async = false;
        xml.loadXML(data);
    }else{
        xml = new DOMParser().parseFromString(data, "text/xml");
    }
    return xml;
}

/** 根据币种id，账户id取得相应的子账户信息
 * @param aid
 * @param cid 
 */
function getSubAccount(aid, cid) {
    try{
		result = JSON.parse(window.external.QuerySQL("select id from tbsubAccount where tbAccount_id = "+aid+ " and tbCurrency_id = " + cid));
	} catch(e) {
		var result = [{
            "id": 1
		}];
	}
	return result;
}

/** 取得所有外币与人民币的兑换结果
 * @param id 外币币种id
 * @return 数组 
 */
function getRMBExchangeInfo(id){
    try {
		result = JSON.parse(window.external.QuerySQL("select sysCurrency_id1 as id,exchangeRate as rate from datExchangeRate where sysCurrency_id="+id, "DataDB"));
	} catch(e) {
	}
	return result;
}

/** 取得两种不同币种间的兑换结果
 * @param id1 币种1
 * @param id2 币种2
 * @return 结果  
 */
function getRMBExchangeInfo1(id1, id2){
	var sql1="";
	if (id2 === undefined) {
		sql1 = "SELECT exchangeRate AS rate FROM datExchangeRate WHERE sysCurrency_id1=" + id1;
	} else {
		sql1 = "SELECT round((SELECT exchangerate FROM datExchangeRate WHERE sysCurrency_id1=" + id1 + ")/(SELECT exchangerate FROM datExchangeRate WHERE sysCurrency_id1=" + id2 + ")*100, 2) AS rate";
	}
	
	//此结果为每100外币与人民币的兑换结果
    try {
		result = JSON.parse(window.external.QuerySQL(sql1, "DataDB"));
	} catch(e) {
		if (id1 == 2) {
			var result = [{
				"rate": 647.90
			}];
		} else {
			var result = [{
				"rate": 916.69
			}];
		}
	}
	$.each(result, function(i, n){
		result11 = n.rate;
	});
	return result11;
}

/** 取得某一外币与人民币的兑换结果
 * @param id 外币币种id
 * @return 数组 
 */
function getRMBExchangeInfo2(id){
	result = 0;
    try {
		result = JSON.parse(window.external.QuerySQL("select exchangeRate as rate from datExchangeRate where sysCurrency_id1="+id, "DataDB"));
		if (result.length > 0) {
			result = result[0].rate;
		}
	} catch(e) {
	}
	return result;
}

/** 更新子账户余额
 * @param id 子账户编号
 */
function modifySubAccountBalance(id) {
	var result = false;
	try {
		//获得最后一笔调整余额
		//modified by liuchang
		//余额调整的二级分类编号
		var changeBalanceClasses = 10067;
		result = JSON.parse(window.external.QuerySQL("SELECT id, TransDate, Amount FROM tbtransaction WHERE tbsubaccount_id=" + id + " AND tbcategory2_id="+ changeBalanceClasses + " ORDER BY transdate DESC, id DESC LIMIT 1"));
		if (result.length > 0) {
			lastBalanceId = result[0].id;
			lastBalanceDate = result[0].TransDate;
			lastBalanceAmount = result[0].Amount;
		} else {
			lastBalanceId = 0;
			lastBalanceDate = "1900-01-01";
			lastBalanceAmount = 0;
		}
		result = JSON.parse(window.external.QuerySQL("SELECT Type, SUM(Amount) sumamount FROM tbtransaction t, tbcategory2, tbcategory1 WHERE tbsubaccount_id=" + id + " AND tbcategory2_id=tbcategory2.id AND tbcategory1_id=tbcategory1.id AND ((t.transdate>'" + lastBalanceDate + "') OR ((t.transdate='" + lastBalanceDate + "') AND (t.id>" + lastBalanceId + "))) AND tbcategory2_id<>10067 GROUP BY Type"));
		totalSpend = 0;
		totalIncome = 0;
		$.each(result, function(i, n){
			if (n.Type == "0") totalSpend = n.sumamount;
			if (n.Type == "1") totalIncome = n.sumamount;
		});
		
		lastBalanceAmount = parseFloat(lastBalanceAmount) + parseFloat(totalIncome) - parseFloat(totalSpend);
		if (window.external.ExecuteSQL("UPDATE tbSubAccount SET balance=" + lastBalanceAmount + " WHERE id=" + id) > 0)
			result = true;
    } catch (e) {
    }
	return result;
}

/** 获取账户类型内容
 * @param id 账户类型编号
 */ 
function getAccountType(id){
	var result = "";
	try {
		result = JSON.parse(window.external.QuerySQL("SELECT id, Name FROM tbAccountType WHERE id=" + id));
    } catch (e) {
		var result = [{
            "id": 1,
            "Name": "美元"
        }, {
            "id": 2,
            "Name":"人民币"
        }, {
            "id": 3,
            "Name":"人民币"
        }];
    }
    return result;
}

/** 删除主账户
 * @param id 为主账户id
 */
function deleteAccount(id) {
	//删除子账户
	try {
		result = JSON.parse(window.external.QuerySQL("SELECT id FROM tbsubaccount WHERE tbAccount_id='" + id + "'"));
		$.each(result, function(i, n) {
			deleteSubAccount(id, n.id);
		});
		 //删除账户
		 window.external.ExecuteSQL("DELETE FROM tbAccount WHERE id=" + id);
	} catch (e) {
	}
}

/* 处理子账户删除操作
 * id 子账户ID
 */
function deleteSubAccount(aid, bid) {
	 try {
		 //将转账的类型修改为未定义收入，未定义支出
		window.external.ExecuteSQL("UPDATE tbTransaction SET direction='', tbcategory2_id=10065, tbsubaccount_id1='' WHERE tbcategory2_id=10059 AND tbsubaccount_id1=" + bid);
		window.external.ExecuteSQL("UPDATE tbTransaction SET direction='', tbcategory2_id=10066, tbsubaccount_id1='' WHERE tbcategory2_id=10060 AND tbsubaccount_id1=" + bid);
		 //删除交易
		window.external.ExecuteSQL("DELETE FROM tbTransaction WHERE tbSubAccount_id=" + bid);
		 //删除子账户
		window.external.ExecuteSQL("DELETE FROM tbSubAccount WHERE id=" + bid);	
		result = JSON.parse(window.external.QuerySQL("SELECT id FROM tbsubaccount WHERE tbAccount_id='" + aid + "'"));
		if (result.length == 0) {
			//如果该主账户下已经没有任何子账户，则连同主账户一并删除
		 	window.external.ExecuteSQL("DELETE FROM tbAccount WHERE id=" + aid);
		}
	 } catch(e) {
	 }
}

/** 检查有没有相同值
 * @param classes 校验的类型
 * @param checkValue 校验值
 * @param id
 * @param parentid
 * @return 有false，没true
 */
function checkUnique(classes, checkValue, id, parentid) {
	var sql = "";
	var rs = false;
	switch (classes){
		case "PayeeName":
			sql = "SELECT count(a.id) AS myCount FROM tbPayee a WHERE a.name='" + checkValue + "'";
			break;
			
		case "AccountName":
			sql = "SELECT count(a.id) AS myCount FROM tbAccount a WHERE a.name='" + checkValue + "'";
			break;
			
		case "CategoryName":
			classLevel = $("#Newpayout2").find("#classlevel").attr("status");
			parentClass = $("#Newpayout2").find("#classout").val();
			if (classLevel == 0) {
				sql = "SELECT count(a.id) AS myCount FROM tbCategory1 a WHERE a.name='" + checkValue + "'";
			} else {
				sql = "SELECT count(a.id) AS myCount FROM tbCategory2 a, tbCategory1 b WHERE tbCategory1_id=b.id AND b.id=" + parentClass + " AND a.name='" + checkValue + "'";
			}
			break;

		case "BankName":
			sql = "SELECT count(a.id) AS myCount FROM tbBank a WHERE a.name='" + checkValue + "' AND classId=" + parentid;
			break;
		
		case "subName":
			if (currentEditType == "add") {
				//此为子账户时校验，子账户校验只需要从subAccount校验即可
				rs = true;
				var arrayLength = subAccount.length;
				if (arrayLength > 0) {			
					for (var i=0; i<arrayLength; i++) {
						if (id === undefined) {
							if (subAccount[i][5] == checkValue) {
								rs = false;
								break;
							}
						} else {
							//编辑校验
							if ((subAccount[i][5] == checkValue) && (id != subAccount[i][6])) {
								rs = false;
								break;			
							}
						}	
					}
				}
			} else {
				sql = "SELECT count(a.id) AS myCount FROM tbAccount b, tbSubAccount a WHERE tbAccount_id=b.id AND b.id=" + parentid + " AND a.name='" + checkValue + "'";
			}
			break;
			
		default:
			break;
	}

	//子账户名校验无需进入数据库校验；
	if ((classes != "subName") || ((classes == "subName") && (currentEditType != "add"))) {
		var temp = "";
		if (classes == "BankName") {
			temp = currentBankEditType;
		} else if (classes == "PayeeName") {
			temp = currentPayeeEditType;
		} else {
			temp = currentEditType;
		} 
		//下面是编辑模式下的sql组装
		if ((temp != "add") && (id > 0)) {
			sql += " AND a.id!=" + id;
		}
		try {
			result = JSON.parse(window.external.QuerySQL(sql));
		} catch (e) {
			result = [{
				"myCount": 0
			}]
		}
		$.each(result, function(i,n) {
			if (n.myCount == 0) {
				rs = true;
			}
		});
	}
	return rs;
}

/*
 * 
 */
function getEditTrans(category2, transArray){
	var sql1="";
	if (id2 === undefined) {
		sql1 = "SELECT exchangeRate AS rate FROM datExchangeRate WHERE sysCurrency_id1=" + id1;
	} else {
		sql1 = "SELECT round((SELECT exchangerate FROM datExchangeRate WHERE sysCurrency_id1=" + id1 + ")/(SELECT exchangerate FROM datExchangeRate WHERE sysCurrency_id1=" + id2 + ")*100, 2) AS rate";
	}
	
	//此结果为每100外币与人民币的兑换结果
    try {
		result = JSON.parse(window.external.QuerySQL(sql1, "DataDB"));
	} catch(e) {
		if (id1 == 2) {
			var result = [{
				"rate": 647.90
			}];
		} else {
			var result = [{
				"rate": 916.69
			}];
		}
	}
	$.each(result, function(i, n){
		result1 = n.rate;
	});
	return result1;
}

/*
 * 批量修改交易记录
 * transArray，需要修改的结果集；category2，分类2； payee，交易记录；
 */

function multipleEditTransAction(transArray,category2,payee){
	var sql = "";
	var cc = transArray.length;
	if( category2 != -1 ){
		sql+= "update tbtransaction set ";
		if( payee != -1 ) sql+=" tbpayee_id = "+payee+", "; 
		sql+=" tbcategory2_id = "+category2+" where id in (select a.id from tbtransaction a, tbcategory1 b, tbcategory2 c where a.tbcategory2_id = c.id and c.tbCategory1_id = b.id and type = ( select type from tbCategory1 a,tbcategory2 b where a.id = b.tbcategory1_id and b.id="+category2+" ) and a.id in (";
		for(var i = 0; i<cc; i++){
			if( i==(cc-1) ) sql+=transArray[i];
			else sql+=transArray[i]+", ";
		}
		sql+=" ) and a.tbcategory2_id not in (10059,10060,10067 ) )";
	} else if( payee != -1 ) {
		sql+= "update tbtransaction set tbpayee_id = "+payee+" where id in (";
		for(var i = 0; i<cc; i++){
			if( i==(cc-1) ) sql+=transArray[i];
			else sql+=transArray[i]+", ";
		}
		sql+=") and tbcategory2_id not in (10059,10060,10067 )";
	}
	//debug("batch="+sql);
	//根据黄山需求 
	
	if(sql!="") window.external.ExecuteSQL(sql);
	sql = "";
	//根据huangshan意见
	if( payee != -1 ) {
		sql+= "update tbtransaction set tbpayee_id = "+payee+" where id in (";
		for(var i = 0; i<cc; i++){
			if( i==(cc-1) ) sql+=transArray[i];
			else sql+=transArray[i]+", ";
		}
		sql+=") and tbcategory2_id not in (10059,10060,10067 )";
	}
	debug("sql="+sql);
	if(sql!="") window.external.ExecuteSQL(sql);
	
}

/*
 * 建立投资类账户后，添加日期提醒事件到tbEvent表中
 * name 账户名称
 * event_date 为到期提醒日
 * status 1 默认为提醒
 * repeat 0 默认为不重复提醒
 * alarm  提前几天提醒
 * description 事件描述
 */
function addInvestEvent(name, subName, event_date, alarm, id){
   var result = -1;
   var obj = {};  //创建序列化对象
   obj.id = (id == undefined) ? 0 : parseInt(id, 10);
   obj.status = 1;
   obj.description = (name + " " + subName + "提醒").replace(/^\s+(.*?)\s+$/, "$1"); //事件名称应为主账户名+子账户名+到期
   obj.repeat = 2;
   obj.event_date = event_date;
   obj.alarm = (alarm == "") ? 0 : parseInt(alarm, 10);
   var string = '{"id":' + obj.id + ', "status":' + obj.status + ',"description":"' + obj.description + '", "repeat":' + obj.repeat + ', "event_date":"' + obj.event_date + '", "alarm":' + obj.alarm + '}';
   //var string = JSON.stringify(obj);
   try{
      result = window.external.AddEvent(string);
	  if (result >= 0){
	     window.external.SetParameter("eventAlarm", "1");//事件添加成功，通知工具页面刷新
	  }else{
	     window.external.SetParameter("eventAlarm", "0");
	  }
   }catch(e){
   }
   return result;
}


/**得到事件ID
*/
function getEventIdByName(name){
    var sql = "select a.id as id from tbEvent a where a.description = '" + name + "' limit 1", //保证唯一，但是会存在bug 
	     id = null;
	try {
	   var result = JSON.parse(window.external.QuerySQL(sql));
	   id = result[0].id;
	}catch(e){
	   //TODO
	}
	return id;
}

/**根据事件名称删除事件
*/
function deleteEventByName(name){
    var sql = "delete from tbEvent where description = '" + name + "'";
    try {
	   if (name != 'undefined')
	      window.external.ExecuteSQL(sql);
	   window.external.SetParameter("eventAlarm", "1");
	}catch(e){
       //TODO	
	}
}

/**根据事件名得到到期日
*/
function getEventDateAlarmByName(name){
    var sql = "select a.alarm, a.datestring from tbEvent a where a.description = '" + name + "' limit 1",
	    result = {};
    try {
	    var queryResult = JSON.parse(window.external.QuerySQL(sql));
		if (typeof queryResult === 'object'){
		    result["alarm"] = queryResult[0].alarm;
	        result["enddate"] = queryResult[0].datestring.toString().substring(0, 10);
		}
	}catch(e){
	   //TODO
	}
	return result;
}


/** 获取用户区间段内的手动账，生成用户要操作的列表列表；
 */
function getUserTransactionList(){
	//groupSelectedTransId 
	var myLength = transactionDuration.length;
	var sql1 = "SELECT e.id AS eid, a.id AS aid, transdate, tbPayee_id, tbCategory2_id, c.type as ctype, c.name as cname, amount, direction, tbSubAccount_id, tbSubAccount_id1, a.tbPayee_id AS pid,direction AS deric, a.comment AS acomment, type, e.name AS dname, d.name AS aname, b.name AS bname, f.name AS fname, c.name AS cname, g.name as payeeName FROM tbTransaction a, tbCategory2 b, tbCategory1 c, tbAccount d, tbSubAccount e, tbCurrency f left join tbPayee g on a.tbpayee_id = g.id ";
		sql1+= "WHERE b.tbCategory1_id=c.id AND a.tbCategory2_id=b.id AND a.tbSubAccount_id=e.id AND e.tbAccount_id=d.id AND f.id=e.tbCurrency_id"; 
		sql1+= " and d.id =" + selectedAid + " and a.transactionClasses = 0 ";
	if(myLength>0){
		for( var i=0; i<myLength; i++){
			if(1%2==0 ) sql+= " and transdate >= "+transactionDuration[i];
			else sql+= " and transdate <= "+transactionDuration[i];
		}
	}
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
	} catch(e) {
		$.each(result, function(i, n){
			result1 = n.rate;
		});
	}
	return result1;
}

/** 删除用户手动账操作
 */
function deleteUserTrans(){
	var temp=groupSelectedTransId.length;
	if(temp>0){
		var sql1 = "select direction as dir, tbsubaccount_id1 as sub1 from tbtransaction where direction > 0 and tbsubaccount_id1 >0 and id in (";
		for(var j=0;j<temp;j++){
			if (j == ( temp - 1 ) ) sql1+= groupSelectedTransId[j];
			else sql1+= groupSelectedTransId[j]+", ";
		}
		sql1+=")";
		var list = JSON.parse(window.external.QuerySQL(sql1));
		if(list!=""){
			//有相关的转账记录
			$.each(list, function(a, t) {
				//删除相关的交易记录
			  	window.external.ExecuteSQL("delete from tbtransaction where id ="+t.dir);
			  	//更新其他子账户余额
			  	modifySubAccountBalance(t.sub1);
			});
		}
		var sql = "delete from tbtransaction where id in ("
		for(var i=0;i<temp;i++){
			if (i == ( temp - 1 ) ) sql+= groupSelectedTransId[i];
			else sql+= groupSelectedTransId[i]+", ";
		}
		sql+=")";
	}
	window.external.ExecuteSQL(sql);
}

function getMatchTransaction(){	
}

/** 取得子账户余额计算的截止时间
 * @return 数组,记录id，transdate；
 */
function getBalaceEndTime(){
	var sql = "select id, date as transDate from tbtransaction where transactionclass = 2 order by transdate desc, id desc limit 0,1";
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
	} catch(e) {
		var result1 = [];
		if(result!=""){
			$.each(result, function(i, n){
				result1.push(n.id);
				result1.push(n.transDate);
			});	
		}
	}
	return result1;
}

function getPayeeId( name ){
	var sql = "select id as pid from tbPayee where name = '"+name+"'";
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
		var result1 = -1;
		if(result!=""){
			$.each(result, function(i, n){
				result1 = n.pid;
			});	
		}
	} catch(e) {
	}
	return result1;
}

/** 取得绑定的用户数据
 */
function fromKeyInfoToAccountId(keyInfo){
	try{
		var result1 = new Array;
		var t1 = window.external.QuerySQL("select id as aid, name as aName from tbAccount where keyInfo = '"+keyInfo+"' ");
		result = JSON.parse(t1);
		$.each(result, function(i, n){
			result1.push(n.aid);
			result1.push(n.aName);
		});	
		return result1;	
	} catch(e){
	}
}

function fromKeyInfoToAccountId1(keyInfo){
	try{
		var result1 = "";
		var rs = 0;
		var t1 = window.external.QuerySQL("select count(id) as myNum from tbAccount where keyInfo = '"+keyInfo+"' ");
		result1 = JSON.parse(t1);
		rs = result1[0].myNum;
		return rs;
	} catch(e){
	}
}

function getBillAboutAccount(mYtype){
	//判断账户时不用参数;
	//判断用户名时带参数;
	var result1 = [];
	if(selectedBankId != ""){
		headFirst = getBankClass();
		var sql = "select a.id as aid, a.name as aName from tbAccount a, tbBank b where a.tbBank_id = b.id and bankId = '"+selectedBankId+"' ";
		switch (headFirst){
			 case "a":
			 //银行类型
			 sql+=" and a.tbaccountType_id = 2 ";
			 break;
			 case "e":
			 //支付宝类型
			 sql+=" and a.tbaccountType_id = 4 ";
			 break;
		}
		if(mYtype === undefined ) sql+=" and ( keyinfo is null or keyinfo = '' )";
		result = JSON.parse(window.external.QuerySQL(sql));
		if(result!=""){
			$.each(result, function(i, n){
				var temp = [];
				temp.push(n.aid);
				temp.push(n.aName);
				result1.push(temp);
			});	
		} 
	}
	return result1;
}

/** 判断一条记录是否要被更新，转账和更改交易对象
 */
function isInsertAndTransferAndPayee(){
	//判断业务类型；
	headFirst = getBankClass();
	switch (headFirst.toLowerCase()){
		case "a":
		 //银行类型，信用卡类型，注意：信用卡类型的金额>=0为支出，信用卡类型的金额<0为收入，
		rLength = RMBData.length;
		var cond2 = "";
		if(rLength>0){
			var RMBSameAsIdArray = []; 
			for(var a = 0;a<rLength;a++){
				/***************先处理替换支付对象操作****************************/
				var payeeId = changePayee(RMBData[a][6]);
				RMBData[a].splice(5,1,payeeId);
				/**************比对是否存在操作************************/
				//新建账户则不做此步骤
				if(!isNewAccount){
					var sql1 = " select count(a.id) as myNum, a.id as aId from tbtransaction a, tbcategory1 b, tbcategory2 c, tbAccount d, tbSubAccount e ";
					//sign编辑为用户的实际时间
					sql1+= " where e.tbAccount_id = d.id and a.tbsubaccount_id = e.id and a.tbcategory2_id = c.id and c.tbcategory1_id = b.id ";
					sql1+= " and sign = '" + RMBData[a][1] + "' and transactionClasses = 1 and e.tbCurrency_id = 1 and d.keyinfo = '"+keyInfo +"' "; 
					if( RMBData[a][2] >= 0 ){
						//支出
						sql1+= " and b.type = 0 and amount ="+RMBData[a][2] ;  	
					} else {
						//收入
						sql1+= " and b.type = 1 and amount = abs("+RMBData[a][2]+")";
					}
					if(RMBSameAsIdArray.length>0){
						sql1+= " and a.id not in ( ";
						for(var rsa=0;rsa<RMBSameAsIdArray.length;rsa++){
							if(rsa == 0) sql1+= RMBSameAsIdArray[rsa];
							else sql1+= ", "+RMBSameAsIdArray[rsa];
						}
						sql1+= " )";
					}
					sql1+=" limit 1 "; 
					try {
						result = JSON.parse(window.external.QuerySQL(sql1));
					} catch(e) {
					}
					debug(sql1+":::::\n");
					if ( result[0].myNum > 0 ){
						//保留原来的
						RMBData[a].splice(4,1,1);
						RMBSameAsIdArray.push(result[0].aId);
					}		
					
				}
				/**************是否要变化为转账操作************************/
				//1，时间，2，金额，3，详情， 4，是否插入
				//找出想匹配的支付宝账单
				// 此业务逻辑存在可能准确的问题
				var cond1 = " and a.id not in (";
				var cond2 = "";
				var cond3 = ")";
				var aT = 4;
				var bankId = 'e001';
				//处理时间格式
				var myDate = RMBData[a][1].substring(0,4)+"-"+RMBData[a][1].substring(4,6)+"-"+RMBData[a][1].substring(6,8);
				var sql = "select a.id as aid from tbtransaction a, tbcategory1 b, tbcategory2 c, tbsubaccount d, tbaccount e, tbbank f ";
				sql+= " where a.tbsubaccount_id = d.id and d.tbAccount_id = e.id and a.tbcategory2_id = c.id and c.tbcategory1_id = b.id and transactionClasses = 1 and f.id  = e.tbBank_id and ";
				sql+= " transdate in ( '"+myDate+"',date('"+myDate+"','-1 day') ) and f.bankid = '"+bankId+"' and a.tbcategory2_id not in (10059,10060,10067) ";
				sql+= " and e.tbAccountType_id = "+aT;
				sql+= " and direction = ''";
				//这部分根据类型不一样要调整
				if( RMBData[a][2] <= 0 ){
					//支出
					sql+= " and b.type = 0 and amount = abs("+RMBData[a][2]+")";  	
				} else {
					//收入
					sql+= " and b.type = 1 and amount = abs("+RMBData[a][2]+")";
				}
				sql=sql+cond1+cond2+cond3; 
				
				sql+= " order by transdate asc limit 1";
				try {
					result = JSON.parse(window.external.QuerySQL(sql));
				} catch(e) {
				}
				debug("sql执行完毕="+sql+"\n");
				//以下为业务处理具体的
				try{
					if(result!=""){
						$.each(result, function(j, m){
							//存入数据集合中
							var tempArray = [];
							tempArray.push(m.aid);
							tempArray.push(1);
							//数组内的位置
							tempArray.push(a);
							need2Trans.push(tempArray);
							//将已经选出的id排除在下次筛选之外
							if(need2Trans.length == 1) cond2+= m.aid;
							else cond2+= ", "+m.aid;
						});
					}
				}catch(e){
				}
			}
		}
		//处理外币的业务逻辑
		var i=0;
		var rLength1 = secondCurrencyData.length;
		if(rLength1>0){
			var SecondSameAsIdArray = []; 
			for(var i = 0;i<rLength1;i++){
				/***************先处理替换支付对象操作****************************/
				var payeeId = changePayee(secondCurrencyData[i][6]);
				if( payeeId>0 ) secondCurrencyData[i].splice(5,1,payeeId);
				//新建账户则不做此步骤
				if(!isNewAccount){
					//目前默认是美元
					var sql1 = " select count(a.id) as myNum, a.id as aId from tbtransaction a, tbcategory1 b, tbcategory2 c, tbAccount d, tbSubAccount e ";
					//sign编辑为用户的实际时间
					
					sql1+= " where e.tbAccount_id = d.id and a.tbsubaccount_id = e.id and a.tbcategory2_id = c.id and c.tbcategory1_id = b.id ";
					sql1+= " and sign = '" + secondCurrencyData[i][1] + "' and transactionClasses = 1 and e.tbCurrency_id = 2 and d.keyinfo = '"+keyInfo +"' "; 
					if( secondCurrencyData[i][2] >= 0 ){
						//支出
						sql1+= " and b.type = 0 and amount ="+secondCurrencyData[i][2] ;  	
					} else {
						//收入
						sql1+= " and b.type = 1 and amount = abs("+secondCurrencyData[i][2]+")";
					}
					if(SecondSameAsIdArray.length>0){
						sql1+= " and a.id not in ( ";
						for(var rsa=0;rsa<SecondSameAsIdArray.length;rsa++){
							if(rsa == 0) sql1+= SecondSameAsIdArray[rsa];
							else sql1+= ", "+SecondSameAsIdArray[rsa];
						}
						sql1+= " ) ";
					}
					sql1+=" limit 1 ";
					if(i==0) debug(sql1);
					try {
						result = JSON.parse(window.external.QuerySQL(sql1));
					} catch(e) {}
					if(result[0].myNum > 0 ){
						SecondSameAsIdArray.push(result[0].aId);
						secondCurrencyData[i].splice(4,1,1);
					}		
					
				} else {
					break;
				}
			}
			//支付宝类型，支付宝类型无美元账户，不涉及转账记录
		}
		break;
		
		case "e":
		//支付宝类型，支付宝类型无美元账户
		rLength = RMBData.length;
		var cond2 = "";
		if(rLength>0){
			var RMBSameAsIdArray = [];
			for(var i=0;i<rLength;i++){
				//3.1版本先不做支付宝支付对象问题
				//新建账户则不做此步骤
				if(!isNewAccount){
					var sql1 = " select count(a.id) as myNum, a.id as aId from tbtransaction a, tbcategory1 b, tbcategory2 c, tbAccount d, tbSubAccount e ";
					//sign编辑为用户的实际时间
					sql1+= " where e.tbAccount_id = d.id and a.tbsubaccount_id = e.id and a.tbcategory2_id = c.id and c.tbcategory1_id = b.id ";
					sql1+= " and sign = '" + RMBData[i][1] + "' and transactionClasses = 1 and e.tbCurrency_id = 1 and d.keyinfo = '"+keyInfo +"' "; 
					if( RMBData[i][2] >= 0 ){
						//支出
						sql1+= " and b.type = 1 and amount ="+RMBData[i][2] ;  	
					} else {
						//收入
						sql1+= " and b.type = 0 and amount = abs("+RMBData[i][2]+")";
					}
					if(RMBSameAsIdArray.length>0){
						sql1+= " and a.id not in ( ";
						for(var rsa=0;rsa<RMBSameAsIdArray.length;rsa++){
							if(rsa == 0) sql1+= RMBSameAsIdArray[rsa];
							else sql1+= ", "+RMBSameAsIdArray[rsa];
						}
						sql1+= " )";
					}
					sql1+=" limit 1 "; 
					try {
						result = JSON.parse(window.external.QuerySQL(sql1));
					} catch(e) {
					}
					debug(sql1+":::::\n");
					if ( result[0].myNum > 0 ){
						//保留原来的
						RMBData[i].splice(4,1,1);
						RMBSameAsIdArray.push(result[0].aId);
					}
				}
				//1，时间，2，金额，3，详情， 4，是否插入
				//找出想匹配的支付宝账单
				// 此业务逻辑存在可能准确的问题
				var cond1 = " and a.id not in (";
				
				var cond3 = ")";
				var aT = 2;
				//处理时间格式
				var myDate = RMBData[i][1].substring(0,4)+"-"+RMBData[i][1].substring(4,6)+"-"+RMBData[i][1].substring(6,8);
				var sql = "select a.id as aid from tbtransaction a, tbcategory1 b, tbcategory2 c, tbsubaccount d, tbaccount e ";
				sql+= " where a.tbsubaccount_id = d.id and d.tbAccount_id = e.id and a.tbcategory2_id = c.id and c.tbcategory1_id = b.id and transactionClasses = 1";
				sql+= " and transdate in ( '"+myDate+"',date('"+myDate+"','+1 day') ) and a.tbcategory2_id not in (10059,10060,10067) ";
				sql+= " and e.tbAccountType_id = "+aT;
				sql+= " and direction = ''";
				//这部分根据类型不一样要调整
				if( RMBData[i][2] >= 0 ){
					//对应支出
					sql+= " and b.type = 0 and amount ="+RMBData[i][2] ;  	
				} else {
					//对应收入
					sql+= " and b.type = 1 and amount = abs("+RMBData[i][2]+")";
				}
				sql=sql+cond1+cond2+cond3; 
				sql+= " order by transdate asc limit 1";
				debug("transdebug="+sql+"\n");
				try {
					result = JSON.parse(window.external.QuerySQL(sql));
				} catch(e) {
					
				}
				
				//以下为业务处理具体的
				if(result!=""){
					$.each(result, function(d, n){
						//存入数据集合中
						var tempArray = [];
						debug("aid="+n.aid+"\n");
						tempArray.push(n.aid);
						tempArray.push(1);
						tempArray.push(i);
						need2Trans.push(tempArray);
						//将已经选出的id排除在下次筛选之外
						if(need2Trans.length == 1) cond2+= n.aid;
						else cond2+= ", "+n.aid;
						debug("need2Trans="+need2Trans+"\n");
					});
				}
			}
		}	
		break;
	}
	debug("合并完成后need2Trans="+need2Trans+"\n")
}

/*
 * 
 */
function getChangePayee(){
	//获取payee
	var sql="select id as aid, name as aname from tbPayee where name  in ( ";
	var bpl= needPayee.length;
	for(var a=0;a<bpl;a++){
		if(i==0) sql+=needPayee[a];
		else sql+=", "+needPayee[a];
	}
	sql+=" )";
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
	} catch(e) {}
	//以下为业务处理具体的
	if(result!=""){
		for(var b=0;b<bpl;b++){
			var tempArray = [];
			tempArray.push(needPayee[b]);
			tempArray.push(0);
			$.each(result, function(i, n){
				//存入数据集合中
				if(needPayee[b] == n.aname){
					tempArray.splice(1,1,1);
					return false;
				}
			});
			payeeAbout.push(tempArray);
		}
	} else {
		//全部不存在，直接置为0;
		for(var b=0;b<bpl;b++){
				//存入数据集合中
			var tempArray = [];
			tempArray.push(needPayee[b]);
			tempArray.push(0);
			payeeAbout.push(tempArray);
		}
	}
}

function getUniqueSubAccount(aid,cid){
	var subAccountId=0;
	var result = "";
	var sql = "select id as sid from tbsubAccount where tbaccount_id ="+aid+" and tbCurrency_id = "+cid;
	debug("getUniqueSubAccount="+sql+"\n");
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
	} catch(e) {
		
	}
	//以下为业务处理具体的
	if(result!=""){
		$.each(result, function(i, n){
			subAccountId = n.sid;
		});
	} else {
		//不存在，此种情况应只会出现在信用账户的情况中
		switch (cid){
			case 1:
				subAccountId = addAccountSub(aid, 1, 0, 0, "", "", "", "人民币", "");
			break;
			case 2:
				subAccountId = addAccountSub(aid, 2, 0, 0, "", "", "", "美元", "");
			break;
		}
	}
	return subAccountId;
}

/** 生成交易对象的参数对
 */
function getViewTransaction( id1,id2 ){
	var result = "";
	var sql1= "SELECT id AS aid, transdate as date1, tbCategory2_id as ctid, comment as comment, tbsubaccount_id as subId from tbTransaction ";
	sql1+= "WHERE id in ( "+id1+", "+id2+" ) ";
	debug("getViewTransaction="+sql1);
	try {
		result = JSON.parse(window.external.QuerySQL(sql1));
	} catch(e) {
	}
	return result;
}

function getFullViewTransaction(id1, id2) {
	var result = "";
	try {
		var sql1 = "SELECT e.id AS eid, a.id AS aid, transdate, tbPayee_id, tbCategory2_id, type, c.name AS cname, amount, direction, tbSubAccount_id, tbSubAccount_id1, "
			+ "a.tbPayee_id AS pid, direction AS deric, a.comment AS acomment, type, e.name AS dname, d.name AS aname, b.name AS bname, f.name AS fname, g.name as payeeName "
			+ "FROM tbTransaction a, tbCategory2 b, tbCategory1 c, tbAccount d, tbSubAccount e, tbCurrency f LEFT JOIN tbPayee g ON a.tbpayee_id=g.id "
			+ "WHERE b.tbCategory1_id=c.id AND a.tbCategory2_id=b.id AND a.tbSubAccount_id=e.id AND e.tbAccount_id=d.id AND f.id=e.tbCurrency_id "
			+ "AND a.id IN (" + id1 + ", " + id2 + ")";
		result = JSON.parse(window.external.QuerySQL(sql1));
	} catch (e) {
	}
	return result;
}

function createSystemTransaction( id1, id2 ){
	var result = "";
	result = getViewTransaction( id1,id2 );
	$.each(result, function(i, n) {
	  	
	});
}

function getBankId(info){
	var id = -1;
	sql =  "select id as bid from tbBank where bankid = '"+info+"'";
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
	} catch(e) {
	}
	$.each(result, function(i, n) {
	  	id = n.bid;
	});
	return id;
}

/*
 * 
 */
function getAllUserTransData(aid){
	try{
		var result = "";
		
		var sql1 = "SELECT substr(transdate,0,4) as myYear, substr(transdate,6,2) as myMonth, e.id AS eid, a.id AS aid, transdate, tbPayee_id, tbCategory2_id, type, c.name as cname, amount, direction, tbSubAccount_id, tbSubAccount_id1, a.tbPayee_id AS pid,direction AS deric, a.comment AS acomment, type, e.name AS dname, d.name AS aname, b.name AS bname, f.name AS fname, c.name AS cname, g.name as payeeName FROM tbTransaction a, tbCategory2 b, tbCategory1 c, tbAccount d, tbSubAccount e, tbCurrency f LEFT JOIN tbPayee g ON a.tbpayee_id=g.id ";
		sql1 += " WHERE b.tbCategory1_id=c.id AND a.tbCategory2_id=b.id AND a.tbSubAccount_id=e.id AND e.tbAccount_id=d.id AND f.id=e.tbCurrency_id ";
		sql1 += " and d.id = " + aid + " and transactionClasses = 0 ";
		if(allMonth.length>0){
			/* 因为sqlite处理的问题，此逻辑目前实现有改进的余地
			sql1 += " and substr(transdate,0,7) in ( ";
			for(var i=0;i<allMonth.length;i++){
				if(i==0) sql1 += "'" + allMonth[i].substring(0,4)+"-"+allMonth[i].substring(4,6)+"'";
				sql1 += ",'" + allMonth[i].substring(0,4)+"-"+allMonth[i].substring(4,6)+"'";				
			}
			sql1 += " ) ";
			*/
		} else if( during.length > 0 ){
			sql1 += " and transdate >= '" + during[0].substring(0,4)+"-"+during[0].substring(4,6)+"-"+during[0].substring(6,8)+"'";
			sql1 += " and transdate <= '" + during[1].substring(0,4)+"-"+during[1].substring(4,6)+"-"+during[1].substring(6,8)+"'";
		}
		
		debug("userbillSQL="+sql1+"\n");
		result = window.external.QuerySQL(sql1);
		result = JSON.parse(result);
	} catch(e){
	}
	return result;
}

/** 生成不分收支类的类别
 */
function renderNoTypeCategory() {
	var Rs="";
	//取得分类；
	var list = getCategoryInfo();
	var list1 = getCategory1Default();
	var class1 = "";
	var currentCate="";
	$.each(list, function(i, n) {
		
		//当前的主分类名和现在的不一样，新开始
		if(currentCate!=n.name1){
			//这个是要加黑体的
			$.each(list1, function(j, m) {
				if(n.name1==m.name1){
					Rs += "<option value='" + m.id2 + "' mhvalue='"+m.name1+"'";                                                                                                                                                                                                                                                                                                                       
					Rs += " son='"+m.name2+"'>" + m.name1 + "</option>";
					currentCate=n.name1;
					return false;			
				}
			});	
		}
		if(!( n.name2 == "CATA420" )){
			Rs += "<option value='" + n.id2 + "' mhvalue='" + n.name1 + " : " + n.name2 + "'";
			Rs += ">" + n.name2 + "</option>";	
		}
	});
	return Rs;
}

/** 更新用户的卡号
 */
function updateAccountKeyInfo(accounid,keyInfo){
	var sql = "update tbaccount set keyinfo = '"+keyInfo+"' where id = "+accounid;
	window.external.ExecuteSQL(sql);
}

/** 插入用户导账单的数据记录月份
 */
function insertAccountGetBillRecord(tbaccount_id,tbmonth,tbkeyInfo){
	//先清除记录
	var sql1 = "delete from tbAccountGetBillMonth where tbaccount_id = "+tbaccount_id+" and tbmonth = '"+tbmonth+"' and tbkeyinfo = '"+tbkeyInfo+"'";
	debug("删除月份记录="+sql1+"\n");
	window.external.ExecuteSQL(sql1);  
	var sql = "insert into tbAccountGetBillMonth (tbaccount_id,tbmonth,tbkeyInfo) values ("+tbaccount_id+", '"+tbmonth+"','"+tbkeyInfo+"')";
	debug("添加月份记录="+sql+"\n");
	window.external.ExecuteSQL(sql);
}

/** 取得用绑定账号等号的相关信息
 * @param aid 主账户编号
 * @param sid 子账户编号 
 */
function getAccountKeyInfo(aid, sid) {
	var result = "";
	if ((!(aid === undefined)) && (aid != "")) {
		var sql = "SELECT keyInfo AS key, b.name AS bankName, tbaccounttype_id AS tid FROM tbAccount a LEFT JOIN tbBank b ON a.tbBank_id=b.id WHERE a.id=" + aid + " AND a.tbaccountType_id IN (2, 4)";
	} else if ((!(sid === undefined)) && (sid != "")) {
		var sql = "SELECT keyInfo AS key, b.name AS bankName, a.tbaccounttype_id AS tid FROM tbAccount a, tbsubaccount c LEFT JOIN tbBank b ON a.tbBank_id=b.id WHERE a.id=c.tbaccount_id AND a.tbaccountType_id IN (2, 4) AND c.id=" + sid;
	}
	try {
		result = JSON.parse(window.external.QuerySQL(sql));
	} catch (e) {
	}
	return result;
}

function getAccountName(bankid,accountType_id){
	var sql = "select a.name as aname, a.id as aid from tbAccount a, tbbank b where a.tbbank_id = b.id and a.tbBank_id and b.bankid  = '"+bankid+"' and tbaccounttype_id = "+accountType_id;
	var result = "";
	debug("支付宝sql="+sql+"\n\n");
	result = window.external.QuerySQL(sql);
	result = JSON.parse(result);
	return result;
}

function getAccountNameNumber(bankid,accountType_id){
	var sql = "select count(a.name) as myNum from tbAccount a, tbbank b where a.tbbank_id = b.id and a.tbBank_id and b.bankid  = '"+bankid+"' and tbaccounttype_id = "+accountType_id;
	var result = "";
	result = window.external.QuerySQL(sql);
	result = JSON.parse(result);
	return result[0].myNum;
}

function removeAccountKeyInfo(aid){
	var sql = "update tbAccount set keyInfo = '' where id ="+aid;
	window.external.ExecuteSQL(sql);
}

function getMySingleAccountName(id){
	var result="";
	var sql = "select name as aname from tbaccount where id = "+id;
	result = window.external.QuerySQL(sql);
	result = JSON.parse(result);
	if(result!="") result=result[0].aname;
	else result = "";
	return result;
}
