#include "stdafx.h"
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <memory.h>
#include <excpt.h>

#include "../RSA/ssglob.h"
#include "../RSA/mpidefs.h"
#include "../RSA/rsa.h"
#include "../RSA/pkcs_rsa.h"
#include "../SHA1/sha.h"
#include "../AES/aes.h"

//#define OFFICIAL_VERSION
#ifdef OFFICIAL_VERSION
U_WORD Sn[]={
0x36ae3648,0xfe1b0567,0xb7211011,0x78ca1679,0x99d8a7c2,0x495f0c9d,0x0a0c316f,0x9977fd8d,
0x3b2c5db2,0x198d60c8,0x310c1068,0xf99af7a9,0x4562e236,0x6ab8e5a4,0xec90d895,0xb5a4bfb1,
0xcfc9c776,0xb44011cd,0x1c3b0f80,0x5711d679,0x33ecded4,0x20c10339,0x9286d069,0xa79ffd16,
0x0a9936f8,0x171a1f1d,0x40189481,0xaf4a35de,0x2cdc22c5,0x426703ee,0x54e398ce,0xb750bf65,
0xb4043261,0x0d457d6b,0x640a2892,0x492d1b81,0xf89c3631,0x1791ec6b,0x8d849955,0x2d9f0b46,
0x947241d9,0x54e87240,0x527952db,0x6ca29009,0x5f92a33f,0xe827c657,0x2a18412a,0x5074eb60,
0x7eb12925,0xbeaac863,0xd0cd9a85,0x61919d1f,0x2928f017,0xfd109a5a,0x3c46cc73,0x69b7665c,
0x19f7bd94,0x10359b71,0xa76f88b8,0x71e2486b,0x1dc5a5e2,0x9e366f1d,0x8a75c059,0xc05084e1,
0x24bee1d7,0x9270f413,0x9fc5a59b,0xe17d9b94,0x05d04bc8,0x13804d48,0xdd0ca704,0x9d274e98,
0xda68ea69,0x8b43daf1,0x7f387857,0xfc4a9e43,0xa7b369f0,0xa3d63c83,0xfd75089b,0x4824cb29,
0x84fe5782,0x459655b2,0x8488b24b,0x0932581f,0xcbd58783,0x98204574,0xb2176c46,0x0830043b,
0x15060999,0x06516d00,0x1b1661f8,0x4f1bd1d1,0x3b9e2da8,0x38466fc6,0xc45a5a2f,0x27310076,
0x56ea86d6,0x175d2b7f,0x6650872e,0x17ef1100,0xbe76e488,0xcc31c31f,0xfaa65a7b,0xeb11c684,
0x0c105862,0xc0a096db,0xba4883dc,0xa9942155,0x1bc5334a,0x4d199f71,0x1d63f455,0x9db6610a,
0x9243e49c,0x4803b7ba,0xde65de2b,0x4df40878,0x1bf3a318,0xeff10588,0xf5f9b1e3,0x840ad6b3,
0x00c61906,0xf96e94c5,0x9c0e1f42,0x4bf5ce10,0x8668bb17,0x0e9805e7,0x4ad1184d,0xeaf32f24,
0xca26186e,0x19ca37a4,0xbaadce4a,0xea817cc5,0x248d0371,0x41a24eef,0x14f8ed52,0x155b7408,
0xffff93a5,0xf1fda8fe,0x47099921,0x747f1841,0xdd123574,0xd0f9e746,0x8be20558,0x4e29ab05,
0xedf7fb32,0xc9f1ed7b,0x396a98cb,0x2fd6ad29,0x188244d5,0x0383db94,0x06ed9b48,0xdd45dec3,
0xd538efdd,0xe98c10c4,0x339d5ac0,0xdf3fe0db,0xfe244d2f,0x222a2f82,0x1ed8fcb5,0x0a9614eb,
0xab94efef,0xb1f3bf23,0x9bdb7aee,0x5a34dbe4,0x3714a683,0x74d4edb7,0x9b0caec6,0x1d065625,
0x39738390,0x1f5c0e59,0x565b4901,0x5b0a8505,0x8bbcd8fa,0x426b1ddc,0x45f23ba4,0x5d7cab18,
0x7a5e165b,0xc660f9f5,0x2140b6f4,0xf2e5c27a,0xc1836abc,0xd4d6c599,0xe3f12b76,0x14e11b6d,
0x985a891d,0xe3410872,0xc5f24aef,0x998c2819,0xa3d0e4f0,0x22cd6a37,0x3f700465,0xbf2981b0,
0x78692ae1,0x9427cf18,0x0ad98b1c,0x6709305b,0xf70dcfbf,0x64c8a279,0x1fd95099,0x01136ddb,
0x332d40c4,0x4bbbcaee,0xb75d03a1,0x5f3767a2,0x86a1b150,0xf11fe7ec,0x4c939639,0xc9b15f45,
0x0ab4b286,0x414fda28,0x96e73aa6,0xc900d698,0xcdcf7d24,0x63eac597,0x8e065f6d,0x27de8cb0,
0x482de9c6,0xbfcc076e,0x6dddb754,0xec4984e3,0x756e805a,0x00114422,0xac9a325f,0x6280fdc5,
0x0728e5b2,0x09a0908a,0x05a902d2,0x11fe792b,0x64777c23,0x117c6c34,0xd90a082f,0xc380b92b,
0x1999c362,0x731cdabc,0x26b1a349,0x8004be19,0xae77904e,0xdd144675,0xa0c51617,0x92c7c88a,
0x3c5c760d,0x39c09015,0x975f22e1,0x5d480f96,0x1bd64504,0x4a78b43a,0x052c382e,0x173c338c,
0xe6b10dd8,0x9e6b9aea,0x221a08c1,0x5ca85585,0x1803fad1,0xca662d27,0x675484a1,0x99c601d7
};

#else
U_WORD Sn[]={
0x1538479a,0x29266ec0,0x133c4c4d,0x123bf0b5,0xb7469728,0x512f4744,0x3fe52c6c,0x0e48a153,
0x6a5a203c,0xe13052b5,0xeae9dda0,0x263e882b,0xe55ba003,0xeced9ac5,0xb46f1b66,0x78fc73b3,
0x299f4f6b,0xc2ed11cb,0x821659ba,0xf6860907,0x77baa69f,0xf4520104,0xf26816fa,0xd0213484,
0x50815e0e,0x5384f2ec,0xe46a8803,0x78521dc6,0x740a7165,0xf026ad40,0x34537ced,0x9fde2dac,
0xe6aa168f,0xe786da50,0x178e32e4,0x35ca0d52,0xe5f4c8bb,0x6990e763,0xdada5b15,0x6c5ca615,
0xf3bf3f55,0xa6e238eb,0x23291ec3,0xb4182191,0xd120740a,0xe6b8f754,0x56b014bb,0xbfc2e6a5,
0x6e213252,0x78f92e9a,0x11e41509,0x7d61a06d,0x40353ebb,0xefc725fb,0x377a3bfc,0x20393746,
0x93540350,0x1b8a65f3,0xe867df1f,0x19d0d4cd,0x3bdceb34,0x0ce5b940,0x85df9a40,0x18e9dfdf,
0xdaa978cc,0x15be27de,0xb059446b,0x0f8a0398,0xc8bc46df,0xc639fa0b,0x4988f7ef,0x2ef92757,
0x717eeb3f,0xf0bcba43,0x72620c57,0xe7ba76b8,0xf27e1623,0xa4ec3144,0x8b1c1b71,0xeb925798,
0x4b100076,0x33ad670a,0xb629c46b,0x2a867514,0xbec92267,0x2f25a6d3,0x5144ce2e,0xd6dbb789,
0xcc7f3662,0x67b9761c,0x015ce3ac,0x5f164794,0x36463315,0xed0da1a0,0xa5a8d78f,0x77fd8f12,
0xfc73546c,0x13072f5f,0xde9d83e4,0x0e933620,0x619c1194,0x68cc6a94,0x8eef00fa,0x561f261b,
0xe49624fa,0xbfc0dabc,0xd594a65c,0xc02588a0,0x4774844c,0xf9bfbd0b,0x15c20fd8,0xfc6ac58c,
0x52aac018,0xf40bbe1b,0xedec147b,0xfbf386fc,0xf17654a5,0xb36d858c,0x40c8cd92,0xf006b44d,
0xfa03f546,0x38112465,0x2f4b94a9,0x4a26781c,0x66494807,0x939f6762,0x19aa028e,0xba1a3b47,
0x379e87d4,0x16fa5480,0xa15af04e,0x32e5a6e9,0xae962ada,0x504737fd,0x1bf39292,0xe3cea260,
0xfffe56f3,0x13ed9656,0x7164b441,0x3d595749,0x18d199e1,0x708f3c47,0xf4a0f0f1,0xf24b3081,
0x40e4e5c6,0xb91232ce,0x3b25579e,0xf2aad525,0xd93cd373,0x7d9dc027,0x05053a26,0x6fb92e93,
0x1ce041fb,0x8f926fcf,0x472fab22,0x73a62df8,0xcbe52a09,0x00990984,0xe3e51a3f,0xe240e47c,
0xe7a1c68c,0xfd62573a,0xfa9089a9,0x7b8053f2,0xb1a88fb1,0x7cac6048,0x97e859a3,0xd4069a26,
0xa9d03ce3,0xec42f011,0xdbe4e2b9,0x5f57e4b3,0x922dc8d1,0x7efe0d5a,0x28b7bfba,0xcd369877,
0x28cb07ba,0x83c2c321,0x1dd8c7b1,0x41feedc4,0x761b9ed3,0x8cb658a2,0x9efa13ec,0x53f62559,
0x34161b80,0xbdd74d60,0xc913fef7,0x0ea11170,0x651bd91d,0x1694ca9c,0x01581fa1,0xb3327845,
0xc68cbcb7,0x2adaf6a7,0xe73e4ff5,0xe9643d3d,0x68d44119,0xedfae774,0x5a7aa941,0x2bc8106c,
0xfbf31c11,0x4ac1e6ed,0x7d018412,0x261d2dde,0x86ef9d2d,0x51d5bbce,0xb0087a34,0x8c29fd6e,
0x0a1dfe5a,0x521b7015,0x950363b5,0x4ef2293b,0xbbdaa35c,0xe0b84dfe,0x0ca95ae2,0x9cbb9aa0,
0x40a581d7,0xcb10dc07,0x36edb648,0xe80b783c,0x34e95542,0x24c9e5ec,0x750510b4,0xe2a62eea,
0x008536d3,0x4aa17ecb,0x69664332,0x7c9164c9,0xd5184012,0xa430cb81,0xf5b4bdb4,0xe7120334,
0x426e8910,0x2d697ae9,0x3517d3db,0x93ac33ca,0xb049409b,0xe81646a3,0x8e91225f,0x31265f66,
0x1e009e9d,0x261d3baa,0xa2a82dab,0xadf84a9e,0xcf241d44,0x859e6784,0x4f100d0a,0x4a0a8b69,
0x428d74fe,0x46a80cdf,0xb8c01b0a,0x673f9dc8,0x3b5dd282,0xdefe1f32,0x3debef77,0xbae7cf23
};
#endif

int unPackCHK(unsigned char *in, unsigned int length, unsigned char *out)
{
	U_WORD n[33];
	U_WORD e[]={1,0x10001};
	unsigned char hash[20];
	SHA_CTX	c;
	AES_KEY key;
	unsigned char *buffer;
	unsigned char iv[16];
	unsigned int buffer_len;
	unsigned int signatureLen;
	unsigned char digiest[256];
	unsigned int digLen;
	unsigned int data_len;
	assert(in && out);

	__try
	{

	if (length<4+4+132)
	{
		return -2001;
	}
	buffer=(unsigned char *)malloc(length);
	if (buffer==NULL)
	{
		return -2000;
	}

	memset(iv,0,16);

	n[0]=32;

	n[31]=Sn[0];
	n[27]=Sn[3];
	n[28]=Sn[5];
	n[18]=Sn[14];
	n[12]=Sn[30];
	n[5]=Sn[33];
	n[26]=Sn[48];
	n[4]=Sn[64];
	n[13]=Sn[82];
	n[24]=Sn[109];
	n[2]=Sn[112];
	n[25]=Sn[134];
	n[32]=Sn[136];
	n[1]=Sn[138];
	n[9]=Sn[140];
	n[16]=Sn[154];
	n[15]=Sn[155];
	n[22]=Sn[161];
	n[19]=Sn[176];
	n[7]=Sn[179];
	n[30]=Sn[185];
	n[23]=Sn[189];
	n[3]=Sn[191];
	n[29]=Sn[192];
	n[6]=Sn[212];
	n[10]=Sn[224];
	n[20]=Sn[225];
	n[21]=Sn[230];
	n[8]=Sn[243];
	n[17]=Sn[245];
	n[11]=Sn[249];
	n[14]=Sn[252];

	SHA1_Init(&c);
	SHA1_Update(&c,(const void *)n,132);
	SHA1_Final(hash, &c);

	AES_set_decrypt_key(hash,128,&key);

	buffer_len=AES_cbc_encrypt(in,buffer, length, &key, iv,AES_DECRYPT);

	memset(hash,0,20);
	memset(&key,0,sizeof(AES_KEY));
	memset(iv,0,16);


	data_len=buffer[0]+(buffer[1]<<8)+(buffer[2]<<16)+(buffer[3]<<24);

	SHA1_Init(&c);
	SHA1_Update(&c,(const void *)&buffer[4],data_len);
	SHA1_Final(hash, &c);

	signatureLen=buffer[4+data_len]+(buffer[4+1+data_len]<<8)+
		(buffer[4+2+data_len]<<16)+(buffer[4+3+data_len]<<24);

	if ((data_len+signatureLen+8)>length)
	{
		free(buffer);
		return -2002;
	}

	digLen=PKCS_RSA_AnalyzeSignature(&buffer[8+data_len], n,e,digiest);
	memset(n,0,33*sizeof(U_WORD));
	if ((digLen!=20)||(memcmp(hash,digiest,20)!=0))
	{
		free(buffer);
		return -2003;
	} 
	memcpy(out,&buffer[4],data_len);
	free(buffer);
	return data_len;
	}
	__except( EXCEPTION_EXECUTE_HANDLER )
	{
		if (buffer)
			free(buffer);
	} 

	return -1000;
}

